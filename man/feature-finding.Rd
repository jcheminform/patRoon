% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/main.R, R/features.R, R/features-bruker.R,
%   R/features-envipick.R, R/features-openms.R, R/features-safd.R,
%   R/features-xcms.R, R/features-xcms3.R
\name{feature-finding}
\alias{feature-finding}
\alias{findFeatures}
\alias{importFeatures}
\alias{findFeaturesBruker}
\alias{findFeaturesEnviPick}
\alias{importFeaturesEnviMass}
\alias{findFeaturesOpenMS}
\alias{findFeaturesSAFD}
\alias{findFeaturesXCMS}
\alias{importFeaturesXCMS}
\alias{findFeaturesXCMS3}
\alias{importFeaturesXCMS3}
\title{Finding features}
\usage{
findFeatures(analysisInfo, algorithm, ..., verbose = TRUE)

importFeatures(analysisInfo, type, ...)

findFeaturesBruker(
  analysisInfo,
  doFMF = "auto",
  startRange = 0,
  endRange = 0,
  save = TRUE,
  close = save,
  verbose = TRUE
)

findFeaturesEnviPick(analysisInfo, ..., verbose = TRUE)

importFeaturesEnviMass(analysisInfo, enviProjPath)

findFeaturesOpenMS(
  analysisInfo,
  noiseThrInt = 1000,
  chromSNR = 3,
  chromFWHM = 5,
  mzPPM = 10,
  reEstimateMTSD = TRUE,
  traceTermCriterion = "sample_rate",
  traceTermOutliers = 5,
  minSampleRate = 0.5,
  minTraceLength = 3,
  maxTraceLength = -1,
  widthFiltering = "fixed",
  minFWHM = 3,
  maxFWHM = 60,
  traceSNRFiltering = FALSE,
  localRTRange = 10,
  localMZRange = 6.5,
  isotopeFilteringModel = "metabolites (5\% RMS)",
  MZScoring13C = FALSE,
  useSmoothedInts = TRUE,
  extraOpts = NULL,
  intSearchRTWindow = 3,
  verbose = TRUE
)

findFeaturesSAFD(
  analysisInfo,
  profPath,
  mzRange = c(0, 400),
  maxNumbIter = 1000,
  maxTPeakW = 300,
  resolution = 30000,
  minMSW = 0.02,
  RThreshold = 0.75,
  minInt = 2000,
  sigIncThreshold = 5,
  S2N = 2,
  minPeakWS = 3,
  verbose = TRUE
)

findFeaturesXCMS(analysisInfo, method = "centWave", ..., verbose = TRUE)

importFeaturesXCMS(xs, analysisInfo)

findFeaturesXCMS3(analysisInfo, param = xcms::CentWaveParam(), verbose = TRUE)

importFeaturesXCMS3(xdata, analysisInfo)
}
\arguments{
\item{analysisInfo}{\link[=analysis-information]{Analysis info table}.}

\item{algorithm}{A character string describing the algorithm that should be
used: \code{"bruker"}, \code{"openms"}, \code{"xcms"}, \code{"xcms3"}, \code{"envipick"}}

\item{...}{further parameters passed to \code{\link[xcms]{xcmsSet}}
(\code{findFeaturesXCMS}), \code{\link[enviPick]{enviPickwrap}}
(\code{featurefinderEnviPick}) or to selected feature finding or importing
algorithms (\code{findFeatures} and \code{importFeatures}).}

\item{verbose}{If set to \code{FALSE} then no text output is shown.}

\item{type}{What type of data should be imported: \code{"xcms"},
\code{"xcms3"} or \code{"envimass"}.}

\item{doFMF}{Run the 'Find Molecular Features' algorithm before loading
compounds. Valid options are: \code{"auto"} (run FMF automatically if
current results indicate it is necessary) and \code{"force"} (run FMF
\emph{always}, even if cached results exist). Note that checks done if
\code{doFMF="auto"} are fairly simplistic, hence set \code{doFMF="force"}
if feature data needs to be updated.}

\item{startRange, endRange}{Start/End retention range (seconds) from which to
collect features. A 0 (zero) for \code{endRange} marks the end of the
analysis.}

\item{close, save}{If \code{TRUE} then Bruker files are closed and saved after
processing with DataAnalysis, respectively. Setting \code{close=TRUE}
prevents that many analyses might be opened simultaneously in DataAnalysis,
which otherwise may use excessive memory or become slow. By default
\code{save} is \code{TRUE} when \code{close} is \code{TRUE}, which is
likely what you want as otherwise any processed data is lost.}

\item{enviProjPath}{The path of the enviMass project.}

\item{noiseThrInt}{Noise intensity threshold. Sets
\code{algorithm:common:noise_threshold_int} option.}

\item{chromSNR}{Minimum S/N of a mass trace. Sets
\code{algorithm:common:chrom_peak_snr} option.}

\item{chromFWHM}{Expected chromatographic peak width (in seconds). Sets
\code{algorithm:common:chrom_fwhm} option.}

\item{mzPPM}{Allowed mass deviation (ppm) for trace detection. Sets
\code{algorithm:mtd:mass_error_ppm}.}

\item{reEstimateMTSD}{If \code{TRUE} then enables dynamic re-estimation of
m/z variance during mass trace collection stage. Sets
\code{algorithm:mtd:reestimate_mt_sd}.}

\item{traceTermCriterion, traceTermOutliers, minSampleRate}{Termination
criterion for the extension of mass traces. See
\href{https://abibuilder.informatik.uni-tuebingen.de/archive/openms/Documentation/release/latest/html/TOPP_FeatureFinderMetabo.html}{FeatureFinderMetabo}.
 Sets the \code{algorithm:mtd:trace_termination_criterion},
\code{algorithm:mtd:trace_termination_outliers} and
\code{algorithm:mtd:min_sample_rate} options, respectively.}

\item{minTraceLength, maxTraceLength}{Minimum/Maximum length of mass trace
(seconds). Set negative value for maxlength to disable maximum. Sets
\code{algorithm:mtd:min_trace_length} and
\code{algorithm:mtd:min_trace_length}, respectively.}

\item{widthFiltering, minFWHM, maxFWHM}{Enable filtering of unlikely peak
widths. See
\href{https://abibuilder.informatik.uni-tuebingen.de/archive/openms/Documentation/release/latest/html/TOPP_FeatureFinderMetabo.html}{FeatureFinderMetabo}.
 Sets \code{algorithm:epd:width_filtering}, \code{algorithm:epd:min_fwhm}
and \code{algorithm:epd:max_fwhm}, respectively.}

\item{traceSNRFiltering}{If \code{TRUE} then apply post-filtering by
signal-to-noise ratio after smoothing. Sets the
\code{algorithm:epd:masstrace_snr_filtering} option.}

\item{localRTRange, localMZRange}{Retention/MZ range where to look for
coeluting/isotopic mass traces. Sets the
\code{algorithm:ffm:local_rt_range} and \code{algorithm:ffm:local_mz_range}
options, respectively.}

\item{isotopeFilteringModel}{Remove/score candidate assemblies based on
isotope intensities. See
\href{https://abibuilder.informatik.uni-tuebingen.de/archive/openms/Documentation/release/latest/html/TOPP_FeatureFinderMetabo.html}{FeatureFinderMetabo}.
 Sets the \code{algorithm:ffm:isotope_filtering_model} option.}

\item{MZScoring13C}{Use the 13C isotope as the expected shift for isotope
mass traces. See
\href{https://abibuilder.informatik.uni-tuebingen.de/archive/openms/Documentation/release/latest/html/TOPP_FeatureFinderMetabo.html}{FeatureFinderMetabo}.
 Sets \code{algorithm:ffm:mz_scoring_13C}.}

\item{useSmoothedInts}{If \code{TRUE} then use LOWESS intensities instead of
raw intensities. Sets the \code{algorithm:ffm:use_smoothed_intensities}
option.}

\item{extraOpts}{Named \code{list} containing extra options that will be
passed to \command{FeatureFinderMetabo}. Any options specified here will
override any of the above. Example:
\code{extraOpts=list("-algorithm:common:noise_threshold_int"=1000)}
(corresponds to setting \code{noiseThrInt=1000}). Set to \code{NULL} to
ignore.}

\item{intSearchRTWindow}{Retention time window (in seconds, +/- feature
retention time) that is used to find the closest data point to the
retention time to obtain the intensity of a feature (this is needed since
OpenMS does not provide this data).}

\item{method}{The method setting used by XCMS peak finding, see
\code{\link[xcms:findPeaks-methods]{xcms::findPeaks}}}

\item{xs}{An \code{\link{xcmsSet}} object.}

\item{param}{The method parameters used by XCMS peak finding, see
\code{\link[xcms:findChromPeaks]{xcms::findChromPeaks}}}

\item{xdata}{An \code{\link{XCMSnExp}} object.}
}
\value{
An object of a class which is derived from \code{\link{features}}.
}
\description{
Functions and classes for collection of features.
}
\details{
Several functions exist to collect features (\emph{i.e.} retention and MS
information that represent potential compounds) from a set of analyses. All
'feature finders' return an object derived from the \code{\link{features}}
base class. The next step in a general workflow is to group and align these
features across analyses by \link[=feature-grouping]{feature groupers}. Note
that some feature finders have a plethora of options which sometimes may have
a large effect on the quality of results. Fine-tuning parameters is therefore
important, and the optimum is largely dependent upon applied analysis
methodology and instrumentation.

\code{findFeatures} is a generic function that will find features
  using one of the supported algorithms. The actual functionality is provided
  by algorithm specific functions such as \code{findFeaturesOpenMS} and
  \code{findFeaturesBruker}. While these functions may be called directly,
  \code{findFeatures} provides a generic interface and is therefore usually
  preferred.

\code{importFeatures} is a generic function to import feature groups
  produced by other software. The actual functionality is provided by
  specific functions such as \code{importFeaturesXCMS} and
  \code{importFeaturesEnviMass}.

\code{findFeaturesBruker} uses the 'Find Molecular Features' (FMF)
  algorithm of Bruker DataAnalysis vendor software to find features. The
  resulting 'compounds' are then transferred from DataAnalysis and stored as
  features.

\code{findFeaturesEnviPick} uses the
  \code{\link[enviPick]{enviPickwrap}}. function from the \pkg{enviPick} R
  package to extract features.

\code{importFeaturesEnviMass} imports features from a project
  generated by the \pkg{enviMass} package. NOTE: this functionality has only
  been tested with older versions of \pkg{enviMass}.

\code{findFeaturesOpenMS} uses the
  \href{https://abibuilder.informatik.uni-tuebingen.de/archive/openms/Documentation/release/latest/html/TOPP_FeatureFinderMetabo.html}{FeatureFinderMetabo}
   TOPP tool (see \url{http://www.openms.de}).

\code{findFeaturesSAFD} uses the
  \code{\link[enviPick]{enviPickwrap}}. function from the \pkg{enviPick} R
  package to extract features.

\code{findFeaturesXCMS} uses the \code{\link[xcms]{xcmsSet}}
  function from the \pkg{xcms} package to find features.

\code{importFeaturesXCMS} converts features from an existing
  \code{\link{xcmsSet}} object (obtained with the \pkg{xcms} package)
  to a new \code{\link{features}} object.

\code{findFeaturesXCMS3} uses the new \code{xcms3} interface from
  the \pkg{xcms} package to find features.

\code{importFeaturesXCMS3} converts features from an existing
  \code{\link{XCMSnExp}} object (obtained with the \pkg{xcms} package)
  to a new \code{\link{features}} object.
}
\note{
The file format of analyses for \code{findFeaturesXCMS} and
  \code{findFeaturesXCMS3} must be \code{mzML} or \code{mzXML}.

\code{findFeaturesBruker} only works with Bruker data files (\code{.d}
  extension) and requires Bruker DataAnalysis and the \pkg{RDCOMClient}
  package to be installed. Furthermore, DataAnalysis combines multiple
  related masses in a feature (\emph{e.g.} isotopes, adducts) but does not
  report the actual (monoisotopic) mass of the feature. Therefore, it is
  simply assumed that the feature mass equals that of the highest intensity
  mass peak.

If any errors related to \command{DCOM} appear it might be necessary to
  terminate DataAnalysis (note that DataAnalysis might still be running as a
  background process). The \command{ProcessCleaner} application installed
  with DataAnalayis can be used for this.

\code{findFeaturesEnviPick} Requires analysis files to be in the
  \code{mzXML} format.

The file format of analyses for \code{findFeaturesOpenMS} must be
  \file{mzML}. This functionality has been tested with OpenMS version >= 2.0.
  Please make sure it is installed and its binaries are added to the PATH
  environment variable or the \code{patRoon.path.OpenMS} option is set.

\code{findFeaturesSAFD} Requires analysis files to be in the
  \code{mzXML} format.
}
\section{Parallelization}{
 \code{generateFeaturesOpenMS} uses multiprocessing to parallelize
  computations. Please see the parallelization section in the handbook for
  more details and \link[=patRoon-package]{patRoon options} for configuration
  options.
}

\references{
\insertRef{Rst2016}{patRoon} \cr\cr
  \href{https://pugixml.org/}{pugixml} (via \href{http://www.rcpp.org/}{Rcpp}) is used to process OpenMS XML output. \cr\cr
  \addCitations{Rcpp}{1} \cr\cr
  \addCitations{Rcpp}{2} \cr\cr
  \addCitations{Rcpp}{3}

\addCitations{xcms}{1} \cr\cr
   \addCitations{xcms}{2} \cr\cr
   \addCitations{xcms}{3}

\addCitations{xcms}{1} \cr\cr \addCitations{xcms}{2} \cr\cr
  \addCitations{xcms}{3}
}
\seealso{
\code{\link{features-class}} and \code{\link{analysis-information}}
}
